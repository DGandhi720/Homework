/* The numbers are checked for prime using JUNIT testing in the PrimeNumberChecker class. */

public class PrimeNumber {
    public static boolean isPrime(int number) {
        if (number < 2) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }

 public static void main(String[] args) {
       
        System.out.println("Testing regular prime numbers");
        System.out.println("Is 7 prime? " + (isPrime(7) == true));
        System.out.println("Is 13 prime? " + (isPrime(13) == true));

        System.out.println("Testing even numbers");
        System.out.println("Is 4 prime? " + (isPrime(4) == false));
        System.out.println("Is 15 prime? " + (isPrime(15) == false));

        System.out.println("Testing special number cases");
        System.out.println("Is 0 prime? " + (isPrime(0) == false));
        System.out.println("Is 1 prime? " + (isPrime(1) == false));
        System.out.println("Is 2 prime? " + (isPrime(2) == true)); 
    }
}
import org.junit.jupiter:junit-jupiter;

public class PrimeNumberChecker {

    @Test
    public void testPrimeNumber() {
        assertTrue(PrimeNumber.isPrime(7));
        assertTrue(PrimeNumber.isPrime(13));
    }

    @Test
    public void testNonPrimeNumber() {
        assertFalse(PrimeNumber.isPrime(4));
        assertFalse(PrimeNumber.isPrime(15));
    }

    @Test
    public void testEdgeCases() {
        assertFalse(PrimeNumber.isPrime(0));
        assertFalse(PrimeNumber.isPrime(1));
        assertTrue(PrimeNumber.isPrime(2));  
    }
}
